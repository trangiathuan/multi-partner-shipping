// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum role {
  customer
  shipper
  admin
  partner
}

enum shipment_status {
  created
  accepted
  shipping
  delivered
  failed
}

enum payment_method {
  stripe
  momo
  vnpay
}

enum payment_status {
  pending
  paid
  refunded
}

enum reconciliation_status {
  pending
  confirmed
}

enum notification_method {
  email
  sms
}

enum notification_status {
  sent
  failed
}

// MODELS

model user {
  id                   String             @id @default(uuid())
  email                String             @unique
  password_hash        String
  role                 role               @default(customer)
  full_name            String
  phone                String?
  created_at           DateTime           @default(now())

  shipments_as_customer Shipment[]        @relation("CustomerShipments")
  shipments_as_partner  Shipment[]        @relation("PartnerShipments")
  notifications         notification[]
  shipper_locations     shipper_location[]
}

model Shipment {
  id               String               @id @default(uuid())
  customer_id      String
  sender_name      String
  sender_address   String
  receiver_name    String
  receiver_address String
  weight           Float
  length           Float
  width            Float
  height           Float
  dimension        Json
  partner_id       String?
  status           shipment_status      @default(created)
  created_at       DateTime             @default(now())

  customer         user                 @relation("CustomerShipments", fields: [customer_id], references: [id])
  partner          user?                @relation("PartnerShipments", fields: [partner_id], references: [id])
  status_logs      shipment_status_log[]
  payments         payment[]
}

model shipment_status_log {
  id           String          @id @default(uuid())
  shipment_id  String
  status       shipment_status
  updated_at   DateTime        @default(now())
  source       String

  shipment     Shipment        @relation(fields: [shipment_id], references: [id])
}

model partner {
  id               String            @id @default(uuid())
  name             String
  api_url          String
  api_key          String
  active           Boolean           @default(true)
  config           Json

  reconciliations  reconciliation[]
}

model payment {
  id           String         @id @default(uuid())
  shipment_id  String
  amount       Decimal
  method       payment_method
  status       payment_status @default(pending)
  paid_at      DateTime?

  shipment     Shipment       @relation(fields: [shipment_id], references: [id])
}

model reconciliation {
  id            String                @id @default(uuid())
  partner_id    String
  period_start  DateTime
  period_end    DateTime
  total_amount  Decimal
  status        reconciliation_status @default(pending)

  partner       partner               @relation(fields: [partner_id], references: [id])
}

model notification {
  id          String              @id @default(uuid())
  user_id     String
  content     String
  method      notification_method
  status      notification_status @default(sent)
  created_at  DateTime            @default(now())

  user        user                @relation(fields: [user_id], references: [id])
}

model shipper_location {
  id          String   @id @default(uuid())
  shipper_id  String
  latitude    Float
  longitude   Float
  updated_at  DateTime @default(now())

  shipper     user     @relation(fields: [shipper_id], references: [id])
}
