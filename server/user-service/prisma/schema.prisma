generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum user_role {
  customer
  shipper
  admin
  partner
}

enum shipment_status {
  created
  accepted
  shipping
  delivered
  failed
}

enum payment_method {
  stripe
  momo
  vnpay
}

enum payment_status {
  pending
  paid
  refunded
}

enum reconciliation_status {
  pending
  confirmed
}

enum notification_method {
  email
  sms
}

enum notification_status {
  sent
  failed
}

// MODELS

model users {
  id             String              @id @default(uuid()) @db.Uuid
  email          String              @unique
  password_hash  String
  role           user_role           @default(customer)
  full_name      String?
  phone          String?
  created_at     DateTime            @default(now()) @db.Timestamptz(6)

  // Relations
  shipments          shipments[]            @relation("UserShipments")
  notifications      notifications[]
  shipper_locations  shipper_locations[]

  @@map("users")
}

model partners {
  id        String            @id @default(uuid()) @db.Uuid
  name      String
  api_url   String?
  api_key   String?
  active    Boolean           @default(true)
  config    Json?

  // Relations
  shipments       shipments[]
  reconciliations reconciliations[]

  @@map("partners")
}

model shipments {
  id               String           @id @default(uuid()) @db.Uuid
  customer_id      String?          @db.Uuid
  sender_name      String?
  sender_address   String?
  receiver_name    String?
  receiver_address String?
  weight           Float?
  length           Float?
  width            Float?
  height           Float?
  description      String?
  price            Int?
  partner_id       String?          @db.Uuid
  status           shipment_status  @default(created)
  created_at       DateTime         @default(now()) @db.Timestamptz(6)

  // Relations
  customer   users?          @relation("UserShipments", fields: [customer_id], references: [id])
  partner    partners?       @relation(fields: [partner_id], references: [id])
  payments   payments[]
  logs       shipment_status_logs[]

  @@map("shipments")
}

model shipment_status_logs {
  id          String           @id @default(uuid()) @db.Uuid
  shipment_id String           @db.Uuid
  status      shipment_status
  updated_at  DateTime         @default(now()) @db.Timestamptz(6)
  source      String?

  // Relation
  shipment    shipments        @relation(fields: [shipment_id], references: [id])

  @@map("shipment_status_logs")
}

model payments {
  id          String           @id @default(uuid()) @db.Uuid
  shipment_id String?          @db.Uuid
  amount      Decimal
  method      payment_method
  status      payment_status   @default(pending)
  paid_at     DateTime?        @db.Timestamptz(6)

  // Relation
  shipment    shipments?       @relation(fields: [shipment_id], references: [id])

  @@map("payments")
}

model reconciliations {
  id            String                @id @default(uuid()) @db.Uuid
  partner_id    String                @db.Uuid
  period_start  DateTime             @db.Timestamptz(6)
  period_end    DateTime             @db.Timestamptz(6)
  total_amount  Decimal
  status        reconciliation_status @default(pending)

  // Relation
  partner       partners              @relation(fields: [partner_id], references: [id])

  @@map("reconciliations")
}

model notifications {
  id         String              @id @default(uuid()) @db.Uuid
  user_id    String              @db.Uuid
  content    String?
  method     notification_method
  status     notification_status @default(sent)
  created_at DateTime            @default(now()) @db.Timestamptz(6)

  // Relation
  user       users               @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

model shipper_locations {
  id         String   @id @default(uuid()) @db.Uuid
  shipper_id String   @db.Uuid
  latitude   Float
  longitude  Float
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  // Relation
  shipper    users    @relation(fields: [shipper_id], references: [id])

  @@map("shipper_locations")
}
